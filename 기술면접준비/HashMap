import java.util.HashSet;

public class UniqueCharacterChecker {

    // 주어진 문자열이 모든 고유 문자를 가지고 있는지 확인하는 메서드
    public static boolean hasUniqueCharacters(String str) {
        // HashSet을 사용하여 중복된 문자가 있는지 확인
        HashSet<Character> charSet = new HashSet<>();

        // 문자열의 각 문자를 순회
        for (char c : str.toCharArray()) {
            // 만약 이미 HashSet에 있다면 중복된 문자임
            if (charSet.contains(c)) {
                return false;
            }
            // 그렇지 않다면, HashSet에 추가
            charSet.add(c);
        }
        // 모든 문자가 고유함
        return true;
    }

    public static void main(String[] args) {
        String testStr1 = "abcdefg";  // 모든 문자가 고유
        String testStr2 = "hello";    // 'l'이 중복됨

        System.out.println("Test String 1: " + testStr1 + " -> " + hasUniqueCharacters(testStr1));
        System.out.println("Test String 2: " + testStr2 + " -> " + hasUniqueCharacters(testStr2));
    }
자바 기술 면접에서 자주 등장하는 문제 중 하나는 "문자열의 문자들이 모두 고유한지 확인하는" 문제입니다. 이 문제를 해결하는 간단한 방법을 구현해 보겠습니다.

```java
import java.util.HashSet;

public class UniqueCharacterChecker {

    // 주어진 문자열이 모든 고유 문자를 가지고 있는지 확인하는 메서드
    public static boolean hasUniqueCharacters(String str) {
        // HashSet을 사용하여 중복된 문자가 있는지 확인
        HashSet<Character> charSet = new HashSet<>();

        // 문자열의 각 문자를 순회
        for (char c : str.toCharArray()) {
            // 만약 이미 HashSet에 있다면 중복된 문자임
            if (charSet.contains(c)) {
                return false;
            }
            // 그렇지 않다면, HashSet에 추가
            charSet.add(c);
        }
        // 모든 문자가 고유함
        return true;
    }

    public static void main(String[] args) {
        String testStr1 = "abcdefg";  // 모든 문자가 고유
        String testStr2 = "hello";    // 'l'이 중복됨

        System.out.println("Test String 1: " + testStr1 + " -> " + hasUniqueCharacters(testStr1));
        System.out.println("Test String 2: " + testStr2 + " -> " + hasUniqueCharacters(testStr2));
    }
}
### 설명:
- **HashSet**: 자바의 `HashSet`은 중복 요소를 허용하지 않는 자료구조입니다. 문자열의 각 문자를 `HashSet`에 추가하면서 이미 존재하는지 확인하는 방식으로 고유 문자인지 검사합니다.
- **시간 복잡도**: 이 접근 방식의 시간 복잡도는 O(n)이며, 여기서 n은 문자열의 길이입니다.

### 예시 출력:
Test String 1: abcdefg -> true
Test String 2: hello -> false

이 코드는 주어진 문자열이 모든 고유 문자를 가지고 있는지 효율적으로 확인할 수 있는 간단한 방법을 보여줍니다.