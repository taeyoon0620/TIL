1. 중심 개념
  절차 지향 프로그래밍(Procedural Programming):
  프로그램을 함수나 절차의 집합으로 생각합니다. 각 함수는 특정 작업을 수행하고, 데이터는 함수들 사이에서 전달됩니다.
  데이터와 기능이 분리되어 있습니다.
  객체 지향 프로그래밍(Object-Oriented Programming):
  프로그램을 객체의 집합으로 생각합니다. 객체는 데이터(속성)와 그 데이터를 조작하는 함수(메서드)를 포함합니다.
  데이터와 기능이 객체 단위로 결합되어 있습니다.
2. 데이터와 함수의 관계
절차 지향 프로그래밍:
  데이터를 함수가 처리하는 방식입니다. 즉, 데이터는 함수들 사이에서 전달되고, 함수는 데이터에 대해 작업을 수행합니다.
  데이터와 함수는 분리되어 있습니다.
  객체 지향 프로그래밍:
  데이터와 그 데이터를 처리하는 함수가 객체 내부에 함께 존재합니다. 각 객체는 자신만의 데이터를 가지고 있으며, 그 데이터를 조작하는 메서드를 통해 상호작용합니다.
3. 코드 재사용성
절차 지향 프로그래밍:
  주로 함수를 재사용합니다. 동일한 코드를 재사용하려면 함수를 만들어 호출하는 방식입니다.
  객체 지향 프로그래밍:
  상속과 다형성을 통해 객체나 클래스를 재사용합니다. 기존 클래스를 확장하거나 변경하여 재사용성을 높입니다.
4. 구조
  절차 지향 프로그래밍:
  프로그램은 함수의 순차적인 호출로 구성됩니다. 제어 흐름이 중요하며, 함수 호출 순서에 따라 프로그램이 실행됩니다.
객체 지향 프로그래밍:
  프로그램은 객체들 간의 상호작용으로 구성됩니다. 객체 간의 메시지 전달이나 메서드 호출이 주요 제어 흐름입니다.
5. 유연성 및 유지보수
  절차 지향 프로그래밍:
  프로그램 규모가 커질수록 함수 간의 의존성과 데이터 흐름을 추적하기 어려워질 수 있습니다.
  코드가 복잡해지면 유지보수가 어려워집니다.
  객체 지향 프로그래밍:
  캡슐화, 상속, 다형성 같은 개념을 통해 프로그램 구조를 개선할 수 있어 대규모 시스템에서 더 유연하고 유지보수가 쉽습니다.
예시 절차 지향 프로그래밍:
int add(int a, int b) {
    return a + b;
}

int main() {
    int result = add(3, 5);
    printf("%d", result);
}

예시 객체 지향 프로그래밍:
class Calculator {
    int add(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        int result = calc.add(3, 5);
        System.out.println(result);
    }
}

요약
  절차 지향은 함수와 절차 중심으로 프로그램을 구성하며, 주로 작은 규모의 프로젝트에서 사용되기 쉽습니다.
  객체 지향은 데이터를 중심으로 객체를 구성하여 프로그램을 작성하며, 대규모 프로젝트에서 구조적이고 재사용 가능한 코드를 작성하는 데 유리합니다.
