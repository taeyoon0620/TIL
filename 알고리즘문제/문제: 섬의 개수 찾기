설명
n x m 크기의 2차원 배열이 주어집니다. 이 배열은 육지와 물로 이루어져 있으며, 1은 육지, 0은 물을 나타냅니다. 상하좌우, 그리고 대각선으로 인접한 육지들은 하나의 섬을 구성합니다. 배열 내에 존재하는 섬의 개수를 구하세요.

입력 형식

첫째 줄: 배열의 크기 n, m (1 ≤ n, m ≤ 1,000)
둘째 줄부터: n x m 크기의 2차원 배열이 주어집니다.
출력 형식

섬의 개수를 출력합니다.

입력 예시

5 5
1 1 0 0 0
0 1 0 0 1
1 0 0 1 1
0 0 0 0 0
1 0 1 0 1

출력 예시

5

풀이 방법
이 문제는 DFS 또는 BFS를 사용하여 풀이할 수 있습니다. 배열의 각 셀을 탐색하면서, 육지를 만나면 DFS나 BFS를 통해 연결된 모든 육지를 하나의 섬으로 간주하고 방문 처리합니다.

파이썬 코드 (DFS 사용)
def count_islands(n, m, grid):
    # 이동 방향 (상하좌우 및 대각선 총 8방향)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]
    
    def dfs(x, y):
        # 현재 위치 방문 처리
        grid[x][y] = 0
        # 8방향 탐색
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            # 범위 내에 있고 육지(1)인 경우
            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1:
                dfs(nx, ny)
    
    island_count = 0
    # 모든 셀을 순회하며 섬 탐색
    for i in range(n):
        for j in range(m):
            if grid[i][j] == 1:  # 새로운 섬 발견
                dfs(i, j)
                island_count += 1  # 섬 개수 증가
    
    return island_count

# 테스트 예제
n, m = 5, 5
grid = [
    [1, 1, 0, 0, 0],
    [0, 1, 0, 0, 1],
    [1, 0, 0, 1, 1],
    [0, 0, 0, 0, 0],
    [1, 0, 1, 0, 1]
]

print(count_islands(n, m, grid))  # 출력: 5

풀이 설명
DFS 탐색: 각 셀을 검사하여 육지(1)를 만나면 DFS를 시작해 연결된 모든 육지를 0으로 바꿔줍니다.
방문 처리: dfs 함수는 8방향(상하좌우 및 대각선)을 탐색해 인접한 모든 육지를 방문 처리합니다.
섬의 개수 증가: 새로 발견된 육지마다 island_count를 증가시켜 총 섬의 개수를 계산합니다.
출력 결과: 최종적으로 섬의 개수를 반환하여 문제를 해결합니다.
DFS 또는 BFS를 통해 연결된 육지를 모두 방문할 수 있어 효율적으로 섬의 개수를 셀 수 있습니다.
