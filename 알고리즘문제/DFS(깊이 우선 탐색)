문제: 섬의 개수 찾기
설명: n x m 크기의 2D 그리드가 주어집니다. 이 그리드는 0과 1로 이루어져 있으며, 1은 땅을, 0은 물을 의미합니다. 1로 연결된 상하좌우 격자들을 하나의 섬으로 정의합니다. 이 그리드를 통해 섬의 개수를 세는 프로그램을 작성하세요.

public class NumberOfIslands {
    public int numIslands(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int n = grid.length;
        int m = grid[0].length;
        int islandCount = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j);
                    islandCount++;
                }
            }
        }

        return islandCount;
    }

    private void dfs(int[][] grid, int x, int y) {
        // 그리드 범위 벗어났거나 물이거나 이미 방문한 경우
        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == 0) {
            return;
        }

        // 현재 땅 방문 처리
        grid[x][y] = 0;

        // 상하좌우로 탐색
        dfs(grid, x + 1, y); // 아래로
        dfs(grid, x - 1, y); // 위로
        dfs(grid, x, y + 1); // 오른쪽으로
        dfs(grid, x, y - 1); // 왼쪽으로
    }

    // 테스트 실행
    public static void main(String[] args) {
        NumberOfIslands solution = new NumberOfIslands();
        int[][] grid = {
            {1, 1, 0, 0, 0},
            {1, 1, 0, 0, 1},
            {0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0},
            {1, 0, 1, 0, 1}
        };

        System.out.println(solution.numIslands(grid)); // 출력: 3
    }
}

풀이 설명
numIslands 메서드: 이중 for문을 통해 그리드의 모든 위치를 순회하며, 땅(1)을 발견하면 DFS를 실행하고, 섬 개수(islandCount)를 증가시킵니다.
dfs 메서드: DFS를 사용해 현재 위치와 연결된 모든 땅을 탐색합니다. 방문한 땅은 0으로 바꾸어 중복 방문을 방지합니다.
결과 반환: 모든 위치를 탐색한 후, 섬의 총 개수를 반환합니다.
이 코드는 연결된 땅을 탐색하고, 섬을 찾아 개수를 세는 방법을 익힐 수 있게 합니다.
