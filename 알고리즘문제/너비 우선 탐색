
**BFS (너비 우선 탐색)**는 그래프에서 시작 정점으로부터 가까운 노드를 먼저 방문한 후 점점 멀리 있는 노드를 탐색하는 방법입니다. BFS는 큐(Queue) 자료구조를 사용하여 구현하며, 최단 경로를 찾는 데 유용합니다.

BFS 알고리즘 작동 방식
시작 노드를 큐에 넣고, 방문 처리를 합니다.
큐에서 노드를 꺼내어 인접한 노드를 모두 탐색합니다.
인접 노드가 아직 방문하지 않은 노드라면 큐에 넣고 방문 처리합니다.
큐가 빌 때까지 위의 과정을 반복합니다.

파이썬 코드 예제
아래 예제에서는 BFS를 사용하여 그래프의 모든 노드를 탐색하는 코드를 작성해 보겠습니다.

from collections import deque

def bfs(graph, start):
    # 방문한 노드를 기록하기 위한 리스트
    visited = []
    # 탐색에 사용할 큐 생성 및 시작 노드 추가
    queue = deque([start])

    while queue:
        # 큐에서 노드를 꺼내 방문 처리
        node = queue.popleft()
        if node not in visited:
            visited.append(node)
            # 인접 노드를 큐에 추가
            queue.extend(graph[node])
    
    return visited

# 그래프 표현 (인접 리스트)
graph = {
    1: [2, 3, 4],
    2: [1, 5],
    3: [1, 6, 7],
    4: [1],
    5: [2],
    6: [3],
    7: [3]
}

# 시작 노드가 1인 경우 BFS 실행
print(bfs(graph, 1))

예제 설명
그래프 표현: graph는 딕셔너리 형태로 표현되어 있으며, 각 키는 노드를, 값은 인접 노드들의 리스트를 의미합니다.
큐를 이용한 탐색: queue에 시작 노드를 추가하고, 큐에서 노드를 하나씩 꺼내면서 인접 노드를 탐색합니다.
방문 처리: visited 리스트를 사용해 방문 여부를 체크합니다.
결과: 시작 노드 1에서부터 연결된 모든 노드를 탐색하여 방문 순서를 반환합니다.

[1, 2, 3, 4, 5, 6, 7]

BFS 활용 예제
최단 경로 찾기: BFS는 노드 간에 동일한 가중치가 있는 그래프에서 최단 경로를 찾을 때 사용됩니다.
네트워크 탐색: 연결된 네트워크나 그룹을 찾는 문제에서 유용합니다.
