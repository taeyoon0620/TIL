문제 2: 두 수의 합
정수 배열 nums와 목표 정수 target이 주어졌을 때, 합이 target이 되는 두 숫자의 인덱스를 반환하세요. 하나의 정답만 있다고 가정합니다.

제약 조건:

같은 요소를 두 번 사용할 수 없습니다.
정답이 항상 존재한다고 가정합니다.

nums = [2, 7, 11, 15]
target = 9


출력 예시
[0, 1]
(2와 7이 더해져 9가 됩니다.)

풀이 2: 해시맵을 사용한 풀이
이 문제는 해시맵(딕셔너리)을 이용하여 효율적으로 풀 수 있습니다. 해시맵을 사용하면 한 번의 순회로 정답을 찾을 수 있어 시간 복잡도가 
𝑂
(
𝑛
)
O(n)입니다.


def two_sum(nums, target):
    # 값과 인덱스를 저장할 딕셔너리
    num_dict = {}
    
    for i, num in enumerate(nums):
        # 타겟에서 현재 숫자를 뺀 값을 찾습니다
        complement = target - num
        # 딕셔너리에 이 값이 있으면 정답을 반환
        if complement in num_dict:
            return [num_dict[complement], i]
        # 딕셔너리에 현재 숫자와 인덱스를 저장
        num_dict[num] = i

# 테스트
nums = [2, 7, 11, 15]
target = 9
print(two_sum(nums, target))  # 출력: [0, 1]

설명:

num_dict 딕셔너리에 배열의 각 요소와 인덱스를 저장합니다.
반복문을 돌면서 target - num 값이 num_dict에 있는지 확인합니다.
있다면 두 수의 인덱스를 [num_dict[complement], i] 형태로 반환합니다.
이 방식은 두 수의 합 문제를 효율적으로 해결할 수 있는 방법입니다.
